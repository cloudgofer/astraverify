name: Deploy AstraVerify

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - local
        - staging
        - production

env:
  PROJECT_ID: astraverify
  REGION: us-central1

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Validate configuration files
        run: |
          echo "Validating configuration files..."
          
          # Check if all config files exist
          if [ ! -f "frontend/src/config.js" ]; then
            echo "‚ùå frontend/src/config.js missing"
            exit 1
          fi
          if [ ! -f "frontend/src/config.staging.js" ]; then
            echo "‚ùå frontend/src/config.staging.js missing"
            exit 1
          fi
          if [ ! -f "frontend/src/config.production.js" ]; then
            echo "‚ùå frontend/src/config.production.js missing"
            exit 1
          fi
          
          # Validate local config
          if ! grep -q "localhost:8080" frontend/src/config.js; then
            echo "‚ùå Local config should point to localhost:8080"
            exit 1
          fi
          
          # Validate staging config
          if ! grep -q "astraverify-backend-staging" frontend/src/config.staging.js; then
            echo "‚ùå Staging config should point to staging backend"
            exit 1
          fi
          
          # Validate production config
          if ! grep -q "astraverify-backend-ml2mhibdvq-uc.a.run.app" frontend/src/config.production.js; then
            echo "‚ùå Production config should point to production backend"
            exit 1
          fi
          
          echo "‚úÖ All configuration files are valid"

      - name: Run frontend tests
        working-directory: frontend
        run: npm test -- --watchAll=false --passWithNoTests

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Run backend tests
        working-directory: backend
        run: |
          python -m pytest tests/ -v --tb=short || echo "No tests found, continuing..."

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Set staging configuration
        run: cp frontend/src/config.staging.js frontend/src/config.js

      - name: Build and deploy backend to staging
        working-directory: backend
        run: |
          gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/astraverify-backend-staging
          gcloud run deploy astraverify-backend-staging \
            --image gcr.io/${{ env.PROJECT_ID }}/astraverify-backend-staging \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10

      - name: Build and deploy frontend to staging
        working-directory: frontend
        run: |
          gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/astraverify-frontend-staging
          gcloud run deploy astraverify-frontend-staging \
            --image gcr.io/${{ env.PROJECT_ID }}/astraverify-frontend-staging \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10

      - name: Get staging URLs
        id: staging-urls
        run: |
          echo "backend_url=$(gcloud run services describe astraverify-backend-staging --region=${{ env.REGION }} --format='value(status.url)')" >> $GITHUB_OUTPUT
          echo "frontend_url=$(gcloud run services describe astraverify-frontend-staging --region=${{ env.REGION }} --format='value(status.url)')" >> $GITHUB_OUTPUT

      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment tests for staging..."
          sleep 30
          
          # Test backend
          curl -f "${{ steps.staging-urls.outputs.backend_url }}/api/check?domain=example.com" || exit 1
          
          # Test frontend
          curl -f "${{ steps.staging-urls.outputs.frontend_url }}" || exit 1
          
          # Test domain analysis
          response=$(curl -s "${{ steps.staging-urls.outputs.backend_url }}/api/check?domain=google.com&progressive=true")
          if echo "$response" | grep -q "google.com"; then
            echo "‚úÖ Domain analysis working"
          else
            echo "‚ùå Domain analysis failed"
            exit 1
          fi

      - name: Create deployment tag
        run: |
          git tag "staging-$(date +%Y%m%d-%H%M%S)"
          git push origin --tags

      - name: Notify deployment success
        run: |
          echo "üöÄ Staging deployment successful!"
          echo "Backend: ${{ steps.staging-urls.outputs.backend_url }}"
          echo "Frontend: ${{ steps.staging-urls.outputs.frontend_url }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Set production configuration
        run: cp frontend/src/config.production.js frontend/src/config.js

      - name: Build and deploy backend to production
        working-directory: backend
        run: |
          gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/astraverify-backend
          gcloud run deploy astraverify-backend \
            --image gcr.io/${{ env.PROJECT_ID }}/astraverify-backend \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10

      - name: Build and deploy frontend to production
        working-directory: frontend
        run: |
          gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/astraverify-frontend
          gcloud run deploy astraverify-frontend \
            --image gcr.io/${{ env.PROJECT_ID }}/astraverify-frontend \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10

      - name: Get production URLs
        id: production-urls
        run: |
          echo "backend_url=$(gcloud run services describe astraverify-backend --region=${{ env.REGION }} --format='value(status.url)')" >> $GITHUB_OUTPUT
          echo "frontend_url=$(gcloud run services describe astraverify-frontend --region=${{ env.REGION }} --format='value(status.url)')" >> $GITHUB_OUTPUT

      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment tests for production..."
          sleep 30
          
          # Test backend
          curl -f "${{ steps.production-urls.outputs.backend_url }}/api/check?domain=example.com" || exit 1
          
          # Test frontend
          curl -f "${{ steps.production-urls.outputs.frontend_url }}" || exit 1
          
          # Test domain analysis
          response=$(curl -s "${{ steps.production-urls.outputs.backend_url }}/api/check?domain=google.com&progressive=true")
          if echo "$response" | grep -q "google.com"; then
            echo "‚úÖ Domain analysis working"
          else
            echo "‚ùå Domain analysis failed"
            exit 1
          fi

      - name: Create deployment tag
        run: |
          git tag "production-$(date +%Y%m%d-%H%M%S)"
          git push origin --tags

      - name: Notify deployment success
        run: |
          echo "üöÄ Production deployment successful!"
          echo "Backend: ${{ steps.production-urls.outputs.backend_url }}"
          echo "Frontend: ${{ steps.production-urls.outputs.frontend_url }}"

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Run health checks
        run: |
          echo "Running health checks..."
          
          # Check staging if it was deployed
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "Checking staging environment..."
            staging_backend=$(gcloud run services describe astraverify-backend-staging --region=${{ env.REGION }} --format='value(status.url)')
            staging_frontend=$(gcloud run services describe astraverify-frontend-staging --region=${{ env.REGION }} --format='value(status.url)')
            
            curl -f "$staging_backend/api/check?domain=example.com" || echo "‚ùå Staging backend health check failed"
            curl -f "$staging_frontend" || echo "‚ùå Staging frontend health check failed"
          fi
          
          # Check production if it was deployed
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "Checking production environment..."
            production_backend=$(gcloud run services describe astraverify-backend --region=${{ env.REGION }} --format='value(status.url)')
            production_frontend=$(gcloud run services describe astraverify-frontend --region=${{ env.REGION }} --format='value(status.url)')
            
            curl -f "$production_backend/api/check?domain=example.com" || echo "‚ùå Production backend health check failed"
            curl -f "$production_frontend" || echo "‚ùå Production frontend health check failed"
          fi
          
          echo "‚úÖ Health checks completed"
